# dev-workflow.yml
name: CI for Group Projects

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  postgres:
    runs-on: ubuntu-latest
    services:
      db:
        image: postgres:15
        env:
          POSTGRES_HOST: postgres
          POSTGRES_PORT: 5432:5432
          POSTGRES_DB: jwt_auth_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
    steps:
      - name: Wait for DB to be ready
        run: sleep 10

  quality-assurance:
    name: Quality Assurance
    runs-on: ubuntu-latest
    needs: postgres

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        working-directory: ./backend
      - name: Apply Migrations
        run: python manage.py migrate
        working-directory: ./backend
      - name: Test with pytest
        run: |
          pip install pytest pytest-cov
          pytest tests.py --doctest-modules --junitxml=junit/test-results.xml --cov=com --cov-report=xml --cov-report=html
        working-directory: ./backend

# jobs:
#   quality-assurance:
#     name: Quality Assurance
#     runs-on: ubuntu-latest
#     services:
#       db:
#         image: postgres:15
#         env:
#           POSTGRES_HOST: postgres
#           POSTGRES_PORT: 5432:5432
#           POSTGRES_DB: jwt_auth_db
#           POSTGRES_USER: postgres
#           POSTGRES_PASSWORD: postgres
    
#     steps:
#     - uses: actions/checkout@v4
#     - name: Set up Python
#       uses: actions/setup-python@v4
#       with:
#         python-version: '3.x'
#     - name: Install dependencies
#       run: |
#         python -m pip install --upgrade pip
#         pip install -r requirements.txt
#       working-directory: ./backend
#     - name: Apply Migrations
#       run: python manage.py migrate
#       working-directory: ./backend
#     - name: Test with pytest
#       run: |
#         pip install pytest pytest-cov
#         pytest tests.py --doctest-modules --junitxml=junit/test-results.xml --cov=com --cov-report=xml --cov-report=html
#       working-directory: ./backend

    
      
#   react-tests:
#     runs-on: ubuntu-latest
#     steps:
#     - uses: actions/checkout@v3
#     - name: Set Up Node for Frontend
#       uses: actions/setup-node@v3
#       with:
#         node-version: '20.x'
#     - run: npm ci
#       working-directory: ./frontend
#     - run: npm run build --if-present
#       working-directory: ./frontend
#     - run: npm test
#       working-directory: ./frontend

#   run-compose:
#     needs: [react-tests]
#     runs-on: ubuntu-latest
#     steps:
#     - uses: actions/checkout@v3
#     - name: Start containers
#       run: ./run-compose-dev-ci.sh
    
#   django-tests:
#     # needs: [run-compose]
#     runs-on: ubuntu-latest
    
#     steps:
#     - uses: actions/checkout@v4
#     - name: Set up Python
#       uses: actions/setup-python@v4
#       with:
#         python-version: '3.x'
#     - name: Install dependencies
#       run: |
#         python -m pip install --upgrade pip
#         pip install -r requirements.txt
#       working-directory: ./backend
#     - name: Apply Migrations
#       run: python manage.py migrate
#       working-directory: ./backend
#     - name: Test with pytest
#       run: |
#         pip install pytest pytest-cov
#         pytest tests.py --doctest-modules --junitxml=junit/test-results.xml --cov=com --cov-report=xml --cov-report=html
#       working-directory: ./backend

#   stop-containers:
#     needs: [django-tests]
#     runs-on: ubuntu-latest
#     steps:
#     - uses: actions/checkout@v3
#     - name: Stop Containers
#       run: docker-compose -f docker-compose.dev.yml down
   
  
#     - name: Stop containers
#       if: always()
#       run: docker-compose -f docker-compose.dev.yml down
        
      