# dev-workflow.yml
name: CI for Group Projects

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# jobs:

  # react-tests:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: Set Up Node for Frontend
  #     uses: actions/setup-node@v3
  #     with:
  #       node-version: lts/*
  #   - run: npm ci
  #     working-directory: ./frontend
  #   - run: npm run build --if-present
  #     working-directory: ./frontend
  #   - run: npm test
  #     working-directory: ./frontend

  # run-compose:
  #   needs: [react-tests]
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: Start containers
  #     run: ./run-compose-dev-ci.sh
    I

  # django-tests:
  #   runs-on: ubuntu-latest

  #   services:
  #     db:
  #       image: postgres:latest
  #       env:
  #         POSTGRES_DB: ${{ secrets.DB_NAME }}
  #         POSTGRES_USER: ${{ secrets.DB_USER }}
  #         POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
  #       ports:
  #         - 5432:5432


    
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.11' 
  #     - run: pip install -r requirements.txt 
  #       working-directory: ./backend
  #     - run: python manage.py test
  #       working-directory: ./backend

  jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      api:
        image: successphil/jwt-auth-template_api-local:1
        ports:
          - "8000:8000"
        environment:
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASS: ${{ secrets.DB_PASSWORD }}
          AWS_SES_REGION_NAME: ${{ secrets.AWS_SES_REGION_NAME }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        options: --health-cmd "curl -f http://localhost:8000/health/ || exit 1" --health-interval 10s --health-timeout 5s --health-retries 5
        depends-on:
          - db

      db:
        image: postgres:15
        volumes:
          - postgres_data:/var/lib/postgresql/data/
        environment:
          POSTGRES_DB: ${{ secrets.DB_NAME }}
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build and Test
        run: |
          docker-compose up --build --exit-code-from api

      - name: Run Django Tests
        run: |
          docker-compose exec api python manage.py test


















  # stop-containers:
  #   runs-on: ubuntu-latest
  #   needs: [run-compose]
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Stop Containers
  #       run: docker-compose -f docker-compose.dev.yml down
   


  
    # - name: Stop containers
    #   if: always()
    #   run: docker-compose -f docker-compose.dev.yml down
        
      